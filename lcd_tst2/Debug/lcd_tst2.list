
lcd_tst2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000346c  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001051c  080035fc  080035fc  000045fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b18  08013b18  00015010  2**0
                  CONTENTS
  4 .ARM          00000008  08013b18  08013b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b20  08013b20  00015010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b20  08013b20  00014b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013b24  08013b24  00014b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08013b28  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000010  08013b38  00015010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08013b38  00015094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d37  00000000  00000000  00015040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001978  00000000  00000000  0001cd77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0001e6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000648  00000000  00000000  0001ef68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f78c  00000000  00000000  0001f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ca8  00000000  00000000  0003ed3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbf56  00000000  00000000  000489e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010493a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ac  00000000  00000000  00104980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00106b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080035e4 	.word	0x080035e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080035e4 	.word	0x080035e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	@ 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2uiz>:
 80007ac:	004a      	lsls	r2, r1, #1
 80007ae:	d211      	bcs.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007b4:	d211      	bcs.n	80007da <__aeabi_d2uiz+0x2e>
 80007b6:	d50d      	bpl.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c0:	d40e      	bmi.n	80007e0 <__aeabi_d2uiz+0x34>
 80007c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ce:	fa23 f002 	lsr.w	r0, r3, r2
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d102      	bne.n	80007e6 <__aeabi_d2uiz+0x3a>
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	4770      	bx	lr
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	4770      	bx	lr

080007ec <ILI9341_NepChar>:
		str++;
	}
}

void ILI9341_NepChar(char ch, const uint8_t font[], float s, uint16_t X, uint16_t Y, uint8_t special, uint16_t color, uint16_t bgcolor)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b08d      	sub	sp, #52	@ 0x34
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	ed87 0a01 	vstr	s0, [r7, #4]
 80007f8:	4611      	mov	r1, r2
 80007fa:	461a      	mov	r2, r3
 80007fc:	4603      	mov	r3, r0
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	460b      	mov	r3, r1
 8000802:	81bb      	strh	r3, [r7, #12]
 8000804:	4613      	mov	r3, r2
 8000806:	807b      	strh	r3, [r7, #2]
	if ((ch < 31) || (ch > 127)) return;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	2b1e      	cmp	r3, #30
 800080c:	f240 8087 	bls.w	800091e <ILI9341_NepChar+0x132>
 8000810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000814:	2b00      	cmp	r3, #0
 8000816:	f2c0 8082 	blt.w	800091e <ILI9341_NepChar+0x132>

	uint8_t fWidth, fHeight, fBPL;
	uint16_t fOffset;
	uint8_t *tempChar;

	fOffset = font[0];
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	if(fOffset == 0){fOffset = 694;};
 8000820:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000822:	2b00      	cmp	r3, #0
 8000824:	d102      	bne.n	800082c <ILI9341_NepChar+0x40>
 8000826:	f240 23b6 	movw	r3, #694	@ 0x2b6
 800082a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	fWidth = font[1];
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	3301      	adds	r3, #1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	76fb      	strb	r3, [r7, #27]
	fHeight = font[2];
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	3302      	adds	r3, #2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	76bb      	strb	r3, [r7, #26]
	fBPL = font[3];
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	3303      	adds	r3, #3
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	767b      	strb	r3, [r7, #25]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	3b20      	subs	r3, #32
 8000848:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800084a:	fb02 f303 	mul.w	r3, r2, r3
 800084e:	3304      	adds	r3, #4
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	4413      	add	r3, r2
 8000854:	617b      	str	r3, [r7, #20]

	/* Clear background first */
	if(special == 0){ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);}
 8000856:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10b      	bne.n	8000876 <ILI9341_NepChar+0x8a>
 800085e:	7efb      	ldrb	r3, [r7, #27]
 8000860:	b29a      	uxth	r2, r3
 8000862:	7ebb      	ldrb	r3, [r7, #26]
 8000864:	b29c      	uxth	r4, r3
 8000866:	8879      	ldrh	r1, [r7, #2]
 8000868:	89b8      	ldrh	r0, [r7, #12]
 800086a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	4623      	mov	r3, r4
 8000872:	f000 fd0d 	bl	8001290 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
 800087a:	e04b      	b.n	8000914 <ILI9341_NepChar+0x128>
	{
		for (int i=0; i < fWidth; i++)
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
 8000880:	e041      	b.n	8000906 <ILI9341_NepChar+0x11a>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000882:	7e7b      	ldrb	r3, [r7, #25]
 8000884:	69fa      	ldr	r2, [r7, #28]
 8000886:	fb03 f202 	mul.w	r2, r3, r2
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	10db      	asrs	r3, r3, #3
 800088e:	f003 031f 	and.w	r3, r3, #31
 8000892:	4413      	add	r3, r2
 8000894:	3301      	adds	r3, #1
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	74fb      	strb	r3, [r7, #19]
			uint8_t b = 1 << (j & 0x07);
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	2201      	movs	r2, #1
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	74bb      	strb	r3, [r7, #18]
			if (( z & b ) != 0x00)
 80008ac:	7cfa      	ldrb	r2, [r7, #19]
 80008ae:	7cbb      	ldrb	r3, [r7, #18]
 80008b0:	4013      	ands	r3, r2
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d023      	beq.n	8000900 <ILI9341_NepChar+0x114>
			{
				ILI9341_DrawPixel((X+i)*s, (Y+j)*s, color);
 80008b8:	89ba      	ldrh	r2, [r7, #12]
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	4413      	add	r3, r2
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80008ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008d2:	ee17 3a90 	vmov	r3, s15
 80008d6:	b298      	uxth	r0, r3
 80008d8:	887a      	ldrh	r2, [r7, #2]
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	4413      	add	r3, r2
 80008de:	ee07 3a90 	vmov	s15, r3
 80008e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80008ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f2:	ee17 3a90 	vmov	r3, s15
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80008fa:	4619      	mov	r1, r3
 80008fc:	f000 fc62 	bl	80011c4 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	3301      	adds	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	7efb      	ldrb	r3, [r7, #27]
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	429a      	cmp	r2, r3
 800090c:	dbb9      	blt.n	8000882 <ILI9341_NepChar+0x96>
	for (int j=0; j < fHeight; j++)
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	3301      	adds	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
 8000914:	7ebb      	ldrb	r3, [r7, #26]
 8000916:	6a3a      	ldr	r2, [r7, #32]
 8000918:	429a      	cmp	r2, r3
 800091a:	dbaf      	blt.n	800087c <ILI9341_NepChar+0x90>
 800091c:	e000      	b.n	8000920 <ILI9341_NepChar+0x134>
	if ((ch < 31) || (ch > 127)) return;
 800091e:	bf00      	nop
			}
		}
	}
}
 8000920:	372c      	adds	r7, #44	@ 0x2c
 8000922:	46bd      	mov	sp, r7
 8000924:	bd90      	pop	{r4, r7, pc}
	...

08000928 <ILI9341_PreetiText>:

void ILI9341_PreetiText(const char* str, const uint8_t font[], float s, uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b0a8      	sub	sp, #160	@ 0xa0
 800092c:	af04      	add	r7, sp, #16
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	ed87 0a01 	vstr	s0, [r7, #4]
 8000936:	4611      	mov	r1, r2
 8000938:	461a      	mov	r2, r3
 800093a:	460b      	mov	r3, r1
 800093c:	807b      	strh	r3, [r7, #2]
 800093e:	4613      	mov	r3, r2
 8000940:	803b      	strh	r3, [r7, #0]
	uint8_t charWidth;						/* Width of character */
	uint16_t fOffset = font[0];				/* Offset of character */
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	uint16_t fWidth = font[1];				/* Width of character */
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	3301      	adds	r3, #1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
	if(fOffset == 0){fOffset = 694;};		/* Offset of character if it is greater than 8 bit value */
 8000954:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000958:	2b00      	cmp	r3, #0
 800095a:	d103      	bne.n	8000964 <ILI9341_PreetiText+0x3c>
 800095c:	f240 23b6 	movw	r3, #694	@ 0x2b6
 8000960:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	uint8_t special = 0;					/* Flag for different matra*/
 8000964:	2300      	movs	r3, #0
 8000966:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
	uint8_t ltr, prv;						/* */
	uint8_t is_special[96] = {0};			/* Lookup table for matra*/
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	225c      	movs	r2, #92	@ 0x5c
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fe08 	bl	800358c <memset>
	/* Available matras and other characters that needs to be joint*/
	is_special[2] = 1;	is_special[7] = 1;	is_special[11] = 1;	is_special[38] = 1;	is_special[44] = 1;is_special[59] = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	75bb      	strb	r3, [r7, #22]
 8000980:	2301      	movs	r3, #1
 8000982:	76fb      	strb	r3, [r7, #27]
 8000984:	2301      	movs	r3, #1
 8000986:	77fb      	strb	r3, [r7, #31]
 8000988:	2301      	movs	r3, #1
 800098a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800098e:	2301      	movs	r3, #1
 8000990:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8000994:	2301      	movs	r3, #1
 8000996:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	is_special[60] = 1;	is_special[61] = 1;	is_special[76] = 1;	is_special[91] = 1;	is_special[92] = 1;is_special[93] = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 80009a0:	2301      	movs	r3, #1
 80009a2:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80009a6:	2301      	movs	r3, #1
 80009a8:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 80009ac:	2301      	movs	r3, #1
 80009ae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80009b2:	2301      	movs	r3, #1
 80009b4:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 80009b8:	2301      	movs	r3, #1
 80009ba:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71

	while (*str)
 80009be:	e0cb      	b.n	8000b58 <ILI9341_PreetiText+0x230>
	{
		ltr = *(str +1);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
		ILI9341_NepChar(*str, font,s, X, Y, special, color, bgcolor);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	7818      	ldrb	r0, [r3, #0]
 80009ce:	8839      	ldrh	r1, [r7, #0]
 80009d0:	887a      	ldrh	r2, [r7, #2]
 80009d2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80009d6:	9302      	str	r3, [sp, #8]
 80009d8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	460b      	mov	r3, r1
 80009e6:	ed97 0a01 	vldr	s0, [r7, #4]
 80009ea:	68b9      	ldr	r1, [r7, #8]
 80009ec:	f7ff fefe 	bl	80007ec <ILI9341_NepChar>
		/* Check character and calculate proper position */

		if (is_special[ltr-32] == 1)		/* Check if the character is matra*/
 80009f0:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80009f4:	3b20      	subs	r3, #32
 80009f6:	3390      	adds	r3, #144	@ 0x90
 80009f8:	443b      	add	r3, r7
 80009fa:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	f040 8090 	bne.w	8000b24 <ILI9341_PreetiText+0x1fc>
		{
			prv = *(str);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			if(prv == 109 || prv == 102)	/* Check if the previous word is combination letter like "jjha", "ana", "pha" */
 8000a0c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8000a10:	2b6d      	cmp	r3, #109	@ 0x6d
 8000a12:	d003      	beq.n	8000a1c <ILI9341_PreetiText+0xf4>
 8000a14:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8000a18:	2b66      	cmp	r3, #102	@ 0x66
 8000a1a:	d17f      	bne.n	8000b1c <ILI9341_PreetiText+0x1f4>
			{
				if(ltr == 108)				/* Finding proper coordinate for ईकार*/
 8000a1c:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8000a20:	2b6c      	cmp	r3, #108	@ 0x6c
 8000a22:	d116      	bne.n	8000a52 <ILI9341_PreetiText+0x12a>
				{
					uint8_t *tempChar = (uint8_t*)&font[((*(str-1) - 0x20) * fOffset) + 4];
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	3b20      	subs	r3, #32
 8000a2c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	3304      	adds	r3, #4
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	4413      	add	r3, r2
 8000a3a:	677b      	str	r3, [r7, #116]	@ 0x74
					charWidth = tempChar[0];
 8000a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
					X -= charWidth;
 8000a44:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	887a      	ldrh	r2, [r7, #2]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	807b      	strh	r3, [r7, #2]
 8000a50:	e064      	b.n	8000b1c <ILI9341_PreetiText+0x1f4>
				}
				else if(ltr == 76)			/* Finding proper coordinate for इकार*/
 8000a52:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8000a56:	2b4c      	cmp	r3, #76	@ 0x4c
 8000a58:	d133      	bne.n	8000ac2 <ILI9341_PreetiText+0x19a>
				{
					uint8_t *tempChar = (uint8_t*)&font[((*(str) - 0x20) * fOffset) + 4];
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	3b20      	subs	r3, #32
 8000a60:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8000a64:	fb02 f303 	mul.w	r3, r2, r3
 8000a68:	3304      	adds	r3, #4
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
					charWidth = tempChar[0];
 8000a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
					X += charWidth;
 8000a78:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	887b      	ldrh	r3, [r7, #2]
 8000a80:	4413      	add	r3, r2
 8000a82:	807b      	strh	r3, [r7, #2]
					X -= 0.8*fWidth;
 8000a84:	887b      	ldrh	r3, [r7, #2]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fe26 	bl	80006d8 <__aeabi_i2d>
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460d      	mov	r5, r1
 8000a90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fe1f 	bl	80006d8 <__aeabi_i2d>
 8000a9a:	a336      	add	r3, pc, #216	@ (adr r3, 8000b74 <ILI9341_PreetiText+0x24c>)
 8000a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa0:	f7ff fb9e 	bl	80001e0 <__aeabi_dmul>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	4629      	mov	r1, r5
 8000aac:	f7ff fcc6 	bl	800043c <__aeabi_dsub>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	4610      	mov	r0, r2
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f7ff fe78 	bl	80007ac <__aeabi_d2uiz>
 8000abc:	4603      	mov	r3, r0
 8000abe:	807b      	strh	r3, [r7, #2]
 8000ac0:	e02c      	b.n	8000b1c <ILI9341_PreetiText+0x1f4>
				}
				else						/* For rest of the matra*/
				{
					uint8_t *tempChar = (uint8_t*)&font[((*(str) - 0x20) * fOffset) + 4];
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	3b20      	subs	r3, #32
 8000ac8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8000acc:	fb02 f303 	mul.w	r3, r2, r3
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	67fb      	str	r3, [r7, #124]	@ 0x7c
					charWidth = tempChar[0];
 8000ad8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
					X -= 1.5*charWidth;
 8000ae0:	887b      	ldrh	r3, [r7, #2]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fdf8 	bl	80006d8 <__aeabi_i2d>
 8000ae8:	4604      	mov	r4, r0
 8000aea:	460d      	mov	r5, r1
 8000aec:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fdf1 	bl	80006d8 <__aeabi_i2d>
 8000af6:	f04f 0200 	mov.w	r2, #0
 8000afa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <ILI9341_PreetiText+0x248>)
 8000afc:	f7ff fb70 	bl	80001e0 <__aeabi_dmul>
 8000b00:	4602      	mov	r2, r0
 8000b02:	460b      	mov	r3, r1
 8000b04:	4620      	mov	r0, r4
 8000b06:	4629      	mov	r1, r5
 8000b08:	f7ff fc98 	bl	800043c <__aeabi_dsub>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	460b      	mov	r3, r1
 8000b10:	4610      	mov	r0, r2
 8000b12:	4619      	mov	r1, r3
 8000b14:	f7ff fe4a 	bl	80007ac <__aeabi_d2uiz>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	807b      	strh	r3, [r7, #2]
				}
			}
			special = 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8000b22:	e016      	b.n	8000b52 <ILI9341_PreetiText+0x22a>
		}
		else								/* Calculating coordinate if it is consonants, numbers or special characters*/
		{
			uint8_t *tempChar = (uint8_t*)&font[((*(str) - 0x20) * fOffset) + 4];
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3b20      	subs	r3, #32
 8000b2a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8000b2e:	fb02 f303 	mul.w	r3, r2, r3
 8000b32:	3304      	adds	r3, #4
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	4413      	add	r3, r2
 8000b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			charWidth = tempChar[0];
 8000b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			X += charWidth;
 8000b46:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	887b      	ldrh	r3, [r7, #2]
 8000b4e:	4413      	add	r3, r2
 8000b50:	807b      	strh	r3, [r7, #2]
		}
		str++;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f47f af2f 	bne.w	80009c0 <ILI9341_PreetiText+0x98>
	}
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	3790      	adds	r7, #144	@ 0x90
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b6c:	f3af 8000 	nop.w
 8000b70:	3ff80000 	.word	0x3ff80000
 8000b74:	9999999a 	.word	0x9999999a
 8000b78:	3fe99999 	.word	0x3fe99999

08000b7c <ILI9341_SPI_Tx>:
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
  }
}

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000b86:	bf00      	nop
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <ILI9341_SPI_Tx+0x30>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d1f8      	bne.n	8000b88 <ILI9341_SPI_Tx+0xc>
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000b96:	1df9      	adds	r1, r7, #7
 8000b98:	230a      	movs	r3, #10
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <ILI9341_SPI_Tx+0x30>)
 8000b9e:	f002 fa1a 	bl	8002fd6 <HAL_SPI_Transmit>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000002c 	.word	0x2000002c

08000bb0 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000bbc:	bf00      	nop
 8000bbe:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <ILI9341_SPI_TxBuffer+0x30>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d1f8      	bne.n	8000bbe <ILI9341_SPI_TxBuffer+0xe>
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8000bcc:	887a      	ldrh	r2, [r7, #2]
 8000bce:	230a      	movs	r3, #10
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <ILI9341_SPI_TxBuffer+0x30>)
 8000bd4:	f002 f9ff 	bl	8002fd6 <HAL_SPI_Transmit>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000002c 	.word	0x2000002c

08000be4 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf6:	f001 facf 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c02:	f001 fac9 	bl	8002198 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ffb7 	bl	8000b7c <ILI9341_SPI_Tx>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2108      	movs	r1, #8
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c16:	f001 fabf 	bl	8002198 <HAL_GPIO_WritePin>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2120      	movs	r1, #32
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c34:	f001 fab0 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c40:	f001 faaa 	bl	8002198 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff98 	bl	8000b7c <ILI9341_SPI_Tx>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2108      	movs	r1, #8
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c54:	f001 faa0 	bl	8002198 <HAL_GPIO_WritePin>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2120      	movs	r1, #32
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c74:	f001 fa90 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f001 fa8a 	bl	8002198 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	4619      	mov	r1, r3
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff91 	bl	8000bb0 <ILI9341_SPI_TxBuffer>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2108      	movs	r1, #8
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c96:	f001 fa7f 	bl	8002198 <HAL_GPIO_WritePin>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000ca2:	b590      	push	{r4, r7, lr}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4604      	mov	r4, r0
 8000caa:	4608      	mov	r0, r1
 8000cac:	4611      	mov	r1, r2
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4623      	mov	r3, r4
 8000cb2:	80fb      	strh	r3, [r7, #6]
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	80bb      	strh	r3, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	807b      	strh	r3, [r7, #2]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	0a1b      	lsrs	r3, r3, #8
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000cda:	887b      	ldrh	r3, [r7, #2]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000ce0:	202a      	movs	r0, #42	@ 0x2a
 8000ce2:	f7ff ff7f 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	2104      	movs	r1, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ffb7 	bl	8000c60 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000cf2:	88bb      	ldrh	r3, [r7, #4]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000d02:	883b      	ldrh	r3, [r7, #0]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000d0c:	883b      	ldrh	r3, [r7, #0]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000d12:	202b      	movs	r0, #43	@ 0x2b
 8000d14:	f7ff ff66 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff9e 	bl	8000c60 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000d24:	202c      	movs	r0, #44	@ 0x2c
 8000d26:	f7ff ff5d 	bl	8000be4 <ILI9341_WriteCommand>
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd90      	pop	{r4, r7, pc}

08000d32 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000d36:	2200      	movs	r2, #0
 8000d38:	2110      	movs	r1, #16
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3e:	f001 fa2b 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d42:	200a      	movs	r0, #10
 8000d44:	f000 ffb4 	bl	8001cb0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d50:	f001 fa22 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d54:	200a      	movs	r0, #10
 8000d56:	f000 ffab 	bl	8001cb0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d62:	f001 fa19 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000d66:	2201      	movs	r2, #1
 8000d68:	2108      	movs	r1, #8
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6e:	f001 fa13 	bl	8002198 <HAL_GPIO_WritePin>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d82:	f001 fa09 	bl	8002198 <HAL_GPIO_WritePin>
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000d8e:	f7ff fff2 	bl	8000d76 <ILI9341_Enable>
	ILI9341_Reset();
 8000d92:	f7ff ffce 	bl	8000d32 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff ff24 	bl	8000be4 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f000 ff87 	bl	8001cb0 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000da2:	20cb      	movs	r0, #203	@ 0xcb
 8000da4:	f7ff ff1e 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000da8:	2039      	movs	r0, #57	@ 0x39
 8000daa:	f7ff ff3a 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000dae:	202c      	movs	r0, #44	@ 0x2c
 8000db0:	f7ff ff37 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff34 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000dba:	2034      	movs	r0, #52	@ 0x34
 8000dbc:	f7ff ff31 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f7ff ff2e 	bl	8000c22 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000dc6:	20cf      	movs	r0, #207	@ 0xcf
 8000dc8:	f7ff ff0c 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff ff28 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000dd2:	20c1      	movs	r0, #193	@ 0xc1
 8000dd4:	f7ff ff25 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000dd8:	2030      	movs	r0, #48	@ 0x30
 8000dda:	f7ff ff22 	bl	8000c22 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000dde:	20e8      	movs	r0, #232	@ 0xe8
 8000de0:	f7ff ff00 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000de4:	2085      	movs	r0, #133	@ 0x85
 8000de6:	f7ff ff1c 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff ff19 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000df0:	2078      	movs	r0, #120	@ 0x78
 8000df2:	f7ff ff16 	bl	8000c22 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000df6:	20ea      	movs	r0, #234	@ 0xea
 8000df8:	f7ff fef4 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ff10 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ff0d 	bl	8000c22 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000e08:	20ed      	movs	r0, #237	@ 0xed
 8000e0a:	f7ff feeb 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000e0e:	2064      	movs	r0, #100	@ 0x64
 8000e10:	f7ff ff07 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f7ff ff04 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000e1a:	2012      	movs	r0, #18
 8000e1c:	f7ff ff01 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000e20:	2081      	movs	r0, #129	@ 0x81
 8000e22:	f7ff fefe 	bl	8000c22 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000e26:	20f7      	movs	r0, #247	@ 0xf7
 8000e28:	f7ff fedc 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000e2c:	2020      	movs	r0, #32
 8000e2e:	f7ff fef8 	bl	8000c22 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000e32:	20c0      	movs	r0, #192	@ 0xc0
 8000e34:	f7ff fed6 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000e38:	2023      	movs	r0, #35	@ 0x23
 8000e3a:	f7ff fef2 	bl	8000c22 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000e3e:	20c1      	movs	r0, #193	@ 0xc1
 8000e40:	f7ff fed0 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000e44:	2010      	movs	r0, #16
 8000e46:	f7ff feec 	bl	8000c22 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000e4a:	20c5      	movs	r0, #197	@ 0xc5
 8000e4c:	f7ff feca 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000e50:	203e      	movs	r0, #62	@ 0x3e
 8000e52:	f7ff fee6 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000e56:	2028      	movs	r0, #40	@ 0x28
 8000e58:	f7ff fee3 	bl	8000c22 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000e5c:	20c7      	movs	r0, #199	@ 0xc7
 8000e5e:	f7ff fec1 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000e62:	2086      	movs	r0, #134	@ 0x86
 8000e64:	f7ff fedd 	bl	8000c22 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000e68:	2036      	movs	r0, #54	@ 0x36
 8000e6a:	f7ff febb 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000e6e:	2048      	movs	r0, #72	@ 0x48
 8000e70:	f7ff fed7 	bl	8000c22 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000e74:	203a      	movs	r0, #58	@ 0x3a
 8000e76:	f7ff feb5 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000e7a:	2055      	movs	r0, #85	@ 0x55
 8000e7c:	f7ff fed1 	bl	8000c22 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000e80:	20b1      	movs	r0, #177	@ 0xb1
 8000e82:	f7ff feaf 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f7ff fecb 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000e8c:	2018      	movs	r0, #24
 8000e8e:	f7ff fec8 	bl	8000c22 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000e92:	20b6      	movs	r0, #182	@ 0xb6
 8000e94:	f7ff fea6 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000e98:	2008      	movs	r0, #8
 8000e9a:	f7ff fec2 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000e9e:	2082      	movs	r0, #130	@ 0x82
 8000ea0:	f7ff febf 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000ea4:	2027      	movs	r0, #39	@ 0x27
 8000ea6:	f7ff febc 	bl	8000c22 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000eaa:	20f2      	movs	r0, #242	@ 0xf2
 8000eac:	f7ff fe9a 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff feb6 	bl	8000c22 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000eb6:	2026      	movs	r0, #38	@ 0x26
 8000eb8:	f7ff fe94 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff feb0 	bl	8000c22 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000ec2:	20e0      	movs	r0, #224	@ 0xe0
 8000ec4:	f7ff fe8e 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000ec8:	200f      	movs	r0, #15
 8000eca:	f7ff feaa 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000ece:	2031      	movs	r0, #49	@ 0x31
 8000ed0:	f7ff fea7 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000ed4:	202b      	movs	r0, #43	@ 0x2b
 8000ed6:	f7ff fea4 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000eda:	200c      	movs	r0, #12
 8000edc:	f7ff fea1 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000ee0:	200e      	movs	r0, #14
 8000ee2:	f7ff fe9e 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000ee6:	2008      	movs	r0, #8
 8000ee8:	f7ff fe9b 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000eec:	204e      	movs	r0, #78	@ 0x4e
 8000eee:	f7ff fe98 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000ef2:	20f1      	movs	r0, #241	@ 0xf1
 8000ef4:	f7ff fe95 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000ef8:	2037      	movs	r0, #55	@ 0x37
 8000efa:	f7ff fe92 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000efe:	2007      	movs	r0, #7
 8000f00:	f7ff fe8f 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000f04:	2010      	movs	r0, #16
 8000f06:	f7ff fe8c 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	f7ff fe89 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000f10:	200e      	movs	r0, #14
 8000f12:	f7ff fe86 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000f16:	2009      	movs	r0, #9
 8000f18:	f7ff fe83 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fe80 	bl	8000c22 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000f22:	20e1      	movs	r0, #225	@ 0xe1
 8000f24:	f7ff fe5e 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff fe7a 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000f2e:	200e      	movs	r0, #14
 8000f30:	f7ff fe77 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000f34:	2014      	movs	r0, #20
 8000f36:	f7ff fe74 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000f3a:	2003      	movs	r0, #3
 8000f3c:	f7ff fe71 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000f40:	2011      	movs	r0, #17
 8000f42:	f7ff fe6e 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000f46:	2007      	movs	r0, #7
 8000f48:	f7ff fe6b 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000f4c:	2031      	movs	r0, #49	@ 0x31
 8000f4e:	f7ff fe68 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000f52:	20c1      	movs	r0, #193	@ 0xc1
 8000f54:	f7ff fe65 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000f58:	2048      	movs	r0, #72	@ 0x48
 8000f5a:	f7ff fe62 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000f5e:	2008      	movs	r0, #8
 8000f60:	f7ff fe5f 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000f64:	200f      	movs	r0, #15
 8000f66:	f7ff fe5c 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000f6a:	200c      	movs	r0, #12
 8000f6c:	f7ff fe59 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000f70:	2031      	movs	r0, #49	@ 0x31
 8000f72:	f7ff fe56 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000f76:	2036      	movs	r0, #54	@ 0x36
 8000f78:	f7ff fe53 	bl	8000c22 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000f7c:	200f      	movs	r0, #15
 8000f7e:	f7ff fe50 	bl	8000c22 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000f82:	2011      	movs	r0, #17
 8000f84:	f7ff fe2e 	bl	8000be4 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000f88:	2064      	movs	r0, #100	@ 0x64
 8000f8a:	f000 fe91 	bl	8001cb0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000f8e:	2029      	movs	r0, #41	@ 0x29
 8000f90:	f7ff fe28 	bl	8000be4 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 f803 	bl	8000fa0 <ILI9341_SetRotation>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000faa:	2036      	movs	r0, #54	@ 0x36
 8000fac:	f7ff fe1a 	bl	8000be4 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 fe7d 	bl	8001cb0 <HAL_Delay>

	switch(rotation)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d837      	bhi.n	800102c <ILI9341_SetRotation+0x8c>
 8000fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc4 <ILI9341_SetRotation+0x24>)
 8000fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc2:	bf00      	nop
 8000fc4:	08000fd5 	.word	0x08000fd5
 8000fc8:	08000feb 	.word	0x08000feb
 8000fcc:	08001001 	.word	0x08001001
 8000fd0:	08001017 	.word	0x08001017
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x00);
 8000fd4:	2040      	movs	r0, #64	@ 0x40
 8000fd6:	f7ff fe24 	bl	8000c22 <ILI9341_WriteData>
		LCD_WIDTH = 320;
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <ILI9341_SetRotation+0x98>)
 8000fdc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fe0:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <ILI9341_SetRotation+0x9c>)
 8000fe4:	22f0      	movs	r2, #240	@ 0xf0
 8000fe6:	801a      	strh	r2, [r3, #0]
		break;
 8000fe8:	e021      	b.n	800102e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x00);
 8000fea:	2020      	movs	r0, #32
 8000fec:	f7ff fe19 	bl	8000c22 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <ILI9341_SetRotation+0x98>)
 8000ff2:	22f0      	movs	r2, #240	@ 0xf0
 8000ff4:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <ILI9341_SetRotation+0x9c>)
 8000ff8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ffc:	801a      	strh	r2, [r3, #0]
		break;
 8000ffe:	e016      	b.n	800102e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x00);
 8001000:	2080      	movs	r0, #128	@ 0x80
 8001002:	f7ff fe0e 	bl	8000c22 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <ILI9341_SetRotation+0x98>)
 8001008:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800100c:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <ILI9341_SetRotation+0x9c>)
 8001010:	22f0      	movs	r2, #240	@ 0xf0
 8001012:	801a      	strh	r2, [r3, #0]
		break;
 8001014:	e00b      	b.n	800102e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x00);
 8001016:	20e0      	movs	r0, #224	@ 0xe0
 8001018:	f7ff fe03 	bl	8000c22 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <ILI9341_SetRotation+0x98>)
 800101e:	22f0      	movs	r2, #240	@ 0xf0
 8001020:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <ILI9341_SetRotation+0x9c>)
 8001024:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001028:	801a      	strh	r2, [r3, #0]
		break;
 800102a:	e000      	b.n	800102e <ILI9341_SetRotation+0x8e>
	default:
		break;
 800102c:	bf00      	nop
	}
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000002 	.word	0x20000002
 800103c:	20000000 	.word	0x20000000

08001040 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001044:	b08d      	sub	sp, #52	@ 0x34
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	6039      	str	r1, [r7, #0]
 800104c:	80fb      	strh	r3, [r7, #6]
 800104e:	466b      	mov	r3, sp
 8001050:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800105e:	d202      	bcs.n	8001066 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001064:	e002      	b.n	800106c <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2120      	movs	r1, #32
 8001070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001074:	f001 f890 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2108      	movs	r1, #8
 800107c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001080:	f001 f88a 	bl	8002198 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	0a1b      	lsrs	r3, r3, #8
 8001088:	b29b      	uxth	r3, r3
 800108a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 800108e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001090:	460b      	mov	r3, r1
 8001092:	3b01      	subs	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	2300      	movs	r3, #0
 8001098:	4688      	mov	r8, r1
 800109a:	4699      	mov	r9, r3
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010b0:	2300      	movs	r3, #0
 80010b2:	460c      	mov	r4, r1
 80010b4:	461d      	mov	r5, r3
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	00eb      	lsls	r3, r5, #3
 80010c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010c4:	00e2      	lsls	r2, r4, #3
 80010c6:	1dcb      	adds	r3, r1, #7
 80010c8:	08db      	lsrs	r3, r3, #3
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	ebad 0d03 	sub.w	sp, sp, r3
 80010d0:	466b      	mov	r3, sp
 80010d2:	3300      	adds	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010da:	e00e      	b.n	80010fa <ILI9341_DrawColorBurst+0xba>
	{
		BurstBuffer[j] = chifted;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e0:	4413      	add	r3, r2
 80010e2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010e6:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80010e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ea:	3301      	adds	r3, #1
 80010ec:	88fa      	ldrh	r2, [r7, #6]
 80010ee:	b2d1      	uxtb	r1, r2
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80010f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f6:	3302      	adds	r3, #2
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010fe:	429a      	cmp	r2, r3
 8001100:	d3ec      	bcc.n	80010dc <ILI9341_DrawColorBurst+0x9c>
	}

	uint32_t SendingSize = size * 2;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800110c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001110:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001116:	fbb3 f2f2 	udiv	r2, r3, r2
 800111a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800111c:	fb01 f202 	mul.w	r2, r1, r2
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d010      	beq.n	800114c <ILI9341_DrawColorBurst+0x10c>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
 800112e:	e009      	b.n	8001144 <ILI9341_DrawColorBurst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001132:	b29a      	uxth	r2, r3
 8001134:	230a      	movs	r3, #10
 8001136:	69b9      	ldr	r1, [r7, #24]
 8001138:	480e      	ldr	r0, [pc, #56]	@ (8001174 <ILI9341_DrawColorBurst+0x134>)
 800113a:	f001 ff4c 	bl	8002fd6 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	3301      	adds	r3, #1
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
 8001144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d3f1      	bcc.n	8001130 <ILI9341_DrawColorBurst+0xf0>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	b29a      	uxth	r2, r3
 8001150:	230a      	movs	r3, #10
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	4807      	ldr	r0, [pc, #28]	@ (8001174 <ILI9341_DrawColorBurst+0x134>)
 8001156:	f001 ff3e 	bl	8002fd6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2108      	movs	r1, #8
 800115e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001162:	f001 f819 	bl	8002198 <HAL_GPIO_WritePin>
 8001166:	46b5      	mov	sp, r6
}
 8001168:	bf00      	nop
 800116a:	3734      	adds	r7, #52	@ 0x34
 800116c:	46bd      	mov	sp, r7
 800116e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001172:	bf00      	nop
 8001174:	2000002c 	.word	0x2000002c

08001178 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <ILI9341_FillScreen+0x44>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <ILI9341_FillScreen+0x48>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	2100      	movs	r1, #0
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fd86 	bl	8000ca2 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <ILI9341_FillScreen+0x44>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <ILI9341_FillScreen+0x48>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff46 	bl	8001040 <ILI9341_DrawColorBurst>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000002 	.word	0x20000002
 80011c0:	20000000 	.word	0x20000000

080011c4 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
 80011ce:	460b      	mov	r3, r1
 80011d0:	80bb      	strh	r3, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80011d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <ILI9341_DrawPixel+0xc4>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	88fa      	ldrh	r2, [r7, #6]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d24d      	bcs.n	800127e <ILI9341_DrawPixel+0xba>
 80011e2:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <ILI9341_DrawPixel+0xc8>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	88ba      	ldrh	r2, [r7, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d247      	bcs.n	800127e <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	753b      	strb	r3, [r7, #20]
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	757b      	strb	r3, [r7, #21]
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	3301      	adds	r3, #1
 8001202:	121b      	asrs	r3, r3, #8
 8001204:	b2db      	uxtb	r3, r3
 8001206:	75bb      	strb	r3, [r7, #22]
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	3301      	adds	r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001212:	88bb      	ldrh	r3, [r7, #4]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	743b      	strb	r3, [r7, #16]
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	747b      	strb	r3, [r7, #17]
 8001222:	88bb      	ldrh	r3, [r7, #4]
 8001224:	3301      	adds	r3, #1
 8001226:	121b      	asrs	r3, r3, #8
 8001228:	b2db      	uxtb	r3, r3
 800122a:	74bb      	strb	r3, [r7, #18]
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	3301      	adds	r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	b29b      	uxth	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	733b      	strb	r3, [r7, #12]
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001246:	202a      	movs	r0, #42	@ 0x2a
 8001248:	f7ff fccc 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2104      	movs	r1, #4
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fd04 	bl	8000c60 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001258:	202b      	movs	r0, #43	@ 0x2b
 800125a:	f7ff fcc3 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	2104      	movs	r1, #4
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fcfb 	bl	8000c60 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800126a:	202c      	movs	r0, #44	@ 0x2c
 800126c:	f7ff fcba 	bl	8000be4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2102      	movs	r1, #2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fcf2 	bl	8000c60 <ILI9341_WriteBuffer>
 800127c:	e000      	b.n	8001280 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800127e:	bf00      	nop
}
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000002 	.word	0x20000002
 800128c:	20000000 	.word	0x20000000

08001290 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4604      	mov	r4, r0
 8001298:	4608      	mov	r0, r1
 800129a:	4611      	mov	r1, r2
 800129c:	461a      	mov	r2, r3
 800129e:	4623      	mov	r3, r4
 80012a0:	80fb      	strh	r3, [r7, #6]
 80012a2:	4603      	mov	r3, r0
 80012a4:	80bb      	strh	r3, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	807b      	strh	r3, [r7, #2]
 80012aa:	4613      	mov	r3, r2
 80012ac:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <ILI9341_DrawRectangle+0xb0>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	88fa      	ldrh	r2, [r7, #6]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d23d      	bcs.n	8001336 <ILI9341_DrawRectangle+0xa6>
 80012ba:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <ILI9341_DrawRectangle+0xb4>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	88ba      	ldrh	r2, [r7, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d237      	bcs.n	8001336 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80012c6:	88fa      	ldrh	r2, [r7, #6]
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001340 <ILI9341_DrawRectangle+0xb0>)
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	b292      	uxth	r2, r2
 80012d2:	4293      	cmp	r3, r2
 80012d4:	dd05      	ble.n	80012e2 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <ILI9341_DrawRectangle+0xb0>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80012e2:	88ba      	ldrh	r2, [r7, #4]
 80012e4:	883b      	ldrh	r3, [r7, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a16      	ldr	r2, [pc, #88]	@ (8001344 <ILI9341_DrawRectangle+0xb4>)
 80012ea:	8812      	ldrh	r2, [r2, #0]
 80012ec:	b292      	uxth	r2, r2
 80012ee:	4293      	cmp	r3, r2
 80012f0:	dd05      	ble.n	80012fe <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <ILI9341_DrawRectangle+0xb4>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80012fe:	88fa      	ldrh	r2, [r7, #6]
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	4413      	add	r3, r2
 8001304:	b29b      	uxth	r3, r3
 8001306:	3b01      	subs	r3, #1
 8001308:	b29c      	uxth	r4, r3
 800130a:	88ba      	ldrh	r2, [r7, #4]
 800130c:	883b      	ldrh	r3, [r7, #0]
 800130e:	4413      	add	r3, r2
 8001310:	b29b      	uxth	r3, r3
 8001312:	3b01      	subs	r3, #1
 8001314:	b29b      	uxth	r3, r3
 8001316:	88b9      	ldrh	r1, [r7, #4]
 8001318:	88f8      	ldrh	r0, [r7, #6]
 800131a:	4622      	mov	r2, r4
 800131c:	f7ff fcc1 	bl	8000ca2 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001320:	883b      	ldrh	r3, [r7, #0]
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	461a      	mov	r2, r3
 800132a:	8b3b      	ldrh	r3, [r7, #24]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe86 	bl	8001040 <ILI9341_DrawColorBurst>
 8001334:	e000      	b.n	8001338 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001336:	bf00      	nop
}
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bd90      	pop	{r4, r7, pc}
 800133e:	bf00      	nop
 8001340:	20000002 	.word	0x20000002
 8001344:	20000000 	.word	0x20000000

08001348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134c:	f000 fc3b 	bl	8001bc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001350:	f000 f80a 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001354:	f000 f898 	bl	8001488 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001358:	f000 f858 	bl	800140c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 800135c:	f7ff fd15 	bl	8000d8a <ILI9341_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  phut_nep();
//  HAL_Delay(2000);
  test_nepali();
 8001360:	f000 f8fa 	bl	8001558 <test_nepali>
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <main+0x1c>

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	@ 0x58
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	2244      	movs	r2, #68	@ 0x44
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f002 f908 	bl	800358c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800138a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800138e:	f000 ff29 	bl	80021e4 <HAL_PWREx_ControlVoltageScaling>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001398:	f000 fb3e 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800139c:	2302      	movs	r3, #2
 800139e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a6:	2310      	movs	r3, #16
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013aa:	2302      	movs	r3, #2
 80013ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ae:	2302      	movs	r3, #2
 80013b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013b6:	230a      	movs	r3, #10
 80013b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013ba:	2307      	movs	r3, #7
 80013bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013be:	2302      	movs	r3, #2
 80013c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 ff60 	bl	8002290 <HAL_RCC_OscConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013d6:	f000 fb1f 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013da:	230f      	movs	r3, #15
 80013dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013de:	2303      	movs	r3, #3
 80013e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	2104      	movs	r1, #4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fb60 	bl	8002ab8 <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013fe:	f000 fb0b 	bl	8001a18 <Error_Handler>
  }
}
 8001402:	bf00      	nop
 8001404:	3758      	adds	r7, #88	@ 0x58
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <MX_SPI1_Init+0x74>)
 8001412:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <MX_SPI1_Init+0x78>)
 8001414:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <MX_SPI1_Init+0x74>)
 8001418:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800141c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <MX_SPI1_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_SPI1_Init+0x74>)
 8001426:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800142a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <MX_SPI1_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001432:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <MX_SPI1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_SPI1_Init+0x74>)
 800143a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800143e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <MX_SPI1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_SPI1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <MX_SPI1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <MX_SPI1_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <MX_SPI1_Init+0x74>)
 800145a:	2207      	movs	r2, #7
 800145c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <MX_SPI1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_SPI1_Init+0x74>)
 8001466:	2208      	movs	r2, #8
 8001468:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_SPI1_Init+0x74>)
 800146c:	f001 fd10 	bl	8002e90 <HAL_SPI_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001476:	f000 facf 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000002c 	.word	0x2000002c
 8001484:	40013000 	.word	0x40013000

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b2c      	ldr	r3, [pc, #176]	@ (8001550 <MX_GPIO_Init+0xc8>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001550 <MX_GPIO_Init+0xc8>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014aa:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <MX_GPIO_Init+0xc8>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <MX_GPIO_Init+0xc8>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	4a25      	ldr	r2, [pc, #148]	@ (8001550 <MX_GPIO_Init+0xc8>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <MX_GPIO_Init+0xc8>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2108      	movs	r1, #8
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d6:	f000 fe5f 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2130      	movs	r1, #48	@ 0x30
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f000 fe59 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2108      	movs	r1, #8
 80014ea:	481a      	ldr	r0, [pc, #104]	@ (8001554 <MX_GPIO_Init+0xcc>)
 80014ec:	f000 fe54 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80014f0:	2328      	movs	r3, #40	@ 0x28
 80014f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150a:	f000 fcdb 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800150e:	2310      	movs	r3, #16
 8001510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001528:	f000 fccc 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800152c:	2308      	movs	r3, #8
 800152e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_GPIO_Init+0xcc>)
 8001544:	f000 fcbe 	bl	8001ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001548:	bf00      	nop
 800154a:	3720      	adds	r7, #32
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	48000400 	.word	0x48000400

08001558 <test_nepali>:

/* USER CODE BEGIN 4 */
void test_nepali(void)
{
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b0a6      	sub	sp, #152	@ 0x98
 800155c:	af02      	add	r7, sp, #8
	char nepali[42] = "svu3Br5hem`67890ftybwgkkmaedo/njzif;xIfq1";
 800155e:	4bc9      	ldr	r3, [pc, #804]	@ (8001884 <test_nepali+0x32c>)
 8001560:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001564:	461d      	mov	r5, r3
 8001566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001572:	c403      	stmia	r4!, {r0, r1}
 8001574:	8022      	strh	r2, [r4, #0]
	char vow[25] = "ccfOO{ppmPP]cf]cf}c+cM";
 8001576:	4bc4      	ldr	r3, [pc, #784]	@ (8001888 <test_nepali+0x330>)
 8001578:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800157c:	461d      	mov	r5, r3
 800157e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001582:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001586:	6020      	str	r0, [r4, #0]
 8001588:	3404      	adds	r4, #4
 800158a:	8021      	strh	r1, [r4, #0]
 800158c:	3402      	adds	r4, #2
 800158e:	0c0b      	lsrs	r3, r1, #16
 8001590:	7023      	strb	r3, [r4, #0]
 8001592:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8001596:	2200      	movs	r2, #0
 8001598:	801a      	strh	r2, [r3, #0]
	char spc[18] = "flL'\"]}+MF[\\{|f]f}";
 800159a:	4bbc      	ldr	r3, [pc, #752]	@ (800188c <test_nepali+0x334>)
 800159c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80015a0:	461d      	mov	r5, r3
 80015a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a6:	682b      	ldr	r3, [r5, #0]
 80015a8:	8023      	strh	r3, [r4, #0]
	char misc[5] = ",-_.=";
 80015aa:	4ab9      	ldr	r2, [pc, #740]	@ (8001890 <test_nepali+0x338>)
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015b4:	6018      	str	r0, [r3, #0]
 80015b6:	3304      	adds	r3, #4
 80015b8:	7019      	strb	r1, [r3, #0]
	char num[10] = "!@#$%^&*()";
 80015ba:	4ab6      	ldr	r2, [pc, #728]	@ (8001894 <test_nepali+0x33c>)
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015c2:	c303      	stmia	r3!, {r0, r1}
 80015c4:	801a      	strh	r2, [r3, #0]

	uint8_t fWidth = PREETI[1]+4;
 80015c6:	4bb4      	ldr	r3, [pc, #720]	@ (8001898 <test_nepali+0x340>)
 80015c8:	785b      	ldrb	r3, [r3, #1]
 80015ca:	3304      	adds	r3, #4
 80015cc:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	uint8_t fHeight = PREETI[2]+4;
 80015d0:	4bb1      	ldr	r3, [pc, #708]	@ (8001898 <test_nepali+0x340>)
 80015d2:	789b      	ldrb	r3, [r3, #2]
 80015d4:	3304      	adds	r3, #4
 80015d6:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	float scale = 0.5;
 80015da:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80015de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	uint16_t x = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	uint16_t y = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	uint8_t i = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	uint8_t tst[3] = {0,8,37};
 80015f4:	4aa9      	ldr	r2, [pc, #676]	@ (800189c <test_nepali+0x344>)
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	4611      	mov	r1, r2
 80015fe:	8019      	strh	r1, [r3, #0]
 8001600:	3302      	adds	r3, #2
 8001602:	0c12      	lsrs	r2, r2, #16
 8001604:	701a      	strb	r2, [r3, #0]
	char word[5];

	uint8_t len_spc = strlen(spc);
 8001606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe fde0 	bl	80001d0 <strlen>
 8001610:	4603      	mov	r3, r0
 8001612:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t len_nep = strlen(nepali);
 8001616:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe fdd8 	bl	80001d0 <strlen>
 8001620:	4603      	mov	r3, r0
 8001622:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8001626:	2002      	movs	r0, #2
 8001628:	f7ff fcba 	bl	8000fa0 <ILI9341_SetRotation>
	ILI9341_FillScreen(BLACK);
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff fda3 	bl	8001178 <ILI9341_FillScreen>

	while(i<len_nep)
 8001632:	e073      	b.n	800171c <test_nepali+0x1c4>
	{
		if(i == 8 || i == 15 || i == 23 || i == 33 || i == 37)
 8001634:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001638:	2b08      	cmp	r3, #8
 800163a:	d00f      	beq.n	800165c <test_nepali+0x104>
 800163c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d00b      	beq.n	800165c <test_nepali+0x104>
 8001644:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001648:	2b17      	cmp	r3, #23
 800164a:	d007      	beq.n	800165c <test_nepali+0x104>
 800164c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001650:	2b21      	cmp	r3, #33	@ 0x21
 8001652:	d003      	beq.n	800165c <test_nepali+0x104>
 8001654:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001658:	2b25      	cmp	r3, #37	@ 0x25
 800165a:	d116      	bne.n	800168a <test_nepali+0x132>
		{
			word[0] = nepali[i];
 800165c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001660:	3390      	adds	r3, #144	@ 0x90
 8001662:	443b      	add	r3, r7
 8001664:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001668:	713b      	strb	r3, [r7, #4]
			word[1] = nepali[i+1];
 800166a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800166e:	3301      	adds	r3, #1
 8001670:	3390      	adds	r3, #144	@ 0x90
 8001672:	443b      	add	r3, r7
 8001674:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001678:	717b      	strb	r3, [r7, #5]
			word[2] = '\0';
 800167a:	2300      	movs	r3, #0
 800167c:	71bb      	strb	r3, [r7, #6]
			i += 2;
 800167e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001682:	3302      	adds	r3, #2
 8001684:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 8001688:	e00d      	b.n	80016a6 <test_nepali+0x14e>
		}
		else
		{
			word[0] = nepali[i];
 800168a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800168e:	3390      	adds	r3, #144	@ 0x90
 8001690:	443b      	add	r3, r7
 8001692:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001696:	713b      	strb	r3, [r7, #4]
			word[1] = '\0';
 8001698:	2300      	movs	r3, #0
 800169a:	717b      	strb	r3, [r7, #5]
			i++;
 800169c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80016a0:	3301      	adds	r3, #1
 80016a2:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		}
		ILI9341_PreetiText(word, PREETI, scale, x,y, WHITE, BLACK);
 80016a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80016aa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80016ae:	1d38      	adds	r0, r7, #4
 80016b0:	2100      	movs	r1, #0
 80016b2:	9101      	str	r1, [sp, #4]
 80016b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80016b8:	9100      	str	r1, [sp, #0]
 80016ba:	ed97 0a20 	vldr	s0, [r7, #128]	@ 0x80
 80016be:	4976      	ldr	r1, [pc, #472]	@ (8001898 <test_nepali+0x340>)
 80016c0:	f7ff f932 	bl	8000928 <ILI9341_PreetiText>
		x += fWidth;
 80016c4:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80016ce:	4413      	add	r3, r2
 80016d0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		if(x > (320/scale - fWidth)){x = 0; y += fHeight;}
 80016d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80016d8:	ee07 3a90 	vmov	s15, r3
 80016dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e0:	ed9f 6a6f 	vldr	s12, [pc, #444]	@ 80018a0 <test_nepali+0x348>
 80016e4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80016e8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80016ec:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001704:	dd0a      	ble.n	800171c <test_nepali+0x1c4>
 8001706:	2300      	movs	r3, #0
 8001708:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800170c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001710:	b29a      	uxth	r2, r3
 8001712:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8001716:	4413      	add	r3, r2
 8001718:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	while(i<len_nep)
 800171c:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 8001720:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001724:	429a      	cmp	r2, r3
 8001726:	d385      	bcc.n	8001634 <test_nepali+0xdc>
	}
	HAL_Delay(2000);
 8001728:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800172c:	f000 fac0 	bl	8001cb0 <HAL_Delay>

	/*Print numbers 1,2,3,4,5,6,7,8,9,0*/
	ILI9341_FillScreen(BLACK);
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff fd21 	bl	8001178 <ILI9341_FillScreen>
	x = 0; y = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800173c:	2300      	movs	r3, #0
 800173e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	ILI9341_PreetiText(num, PREETI,scale, x,y, WHITE, BLACK);
 8001742:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8001746:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800174a:	f107 0010 	add.w	r0, r7, #16
 800174e:	2100      	movs	r1, #0
 8001750:	9101      	str	r1, [sp, #4]
 8001752:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001756:	9100      	str	r1, [sp, #0]
 8001758:	ed97 0a20 	vldr	s0, [r7, #128]	@ 0x80
 800175c:	494e      	ldr	r1, [pc, #312]	@ (8001898 <test_nepali+0x340>)
 800175e:	f7ff f8e3 	bl	8000928 <ILI9341_PreetiText>

	/*Print Vowels*/
	x = 0; y += fHeight;
 8001762:	2300      	movs	r3, #0
 8001764:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8001768:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800176c:	b29a      	uxth	r2, r3
 800176e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8001772:	4413      	add	r3, r2
 8001774:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	ILI9341_PreetiText(vow, PREETI, scale, x,y, WHITE, BLACK);
 8001778:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800177c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8001780:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001784:	2100      	movs	r1, #0
 8001786:	9101      	str	r1, [sp, #4]
 8001788:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800178c:	9100      	str	r1, [sp, #0]
 800178e:	ed97 0a20 	vldr	s0, [r7, #128]	@ 0x80
 8001792:	4941      	ldr	r1, [pc, #260]	@ (8001898 <test_nepali+0x340>)
 8001794:	f7ff f8c8 	bl	8000928 <ILI9341_PreetiText>

	/*Print special characters available in the font*/
	x = 0; y += fHeight;
 8001798:	2300      	movs	r3, #0
 800179a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800179e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80017a8:	4413      	add	r3, r2
 80017aa:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	ILI9341_PreetiText("sf]", PREETI, scale ,x,y, WHITE, BLACK);
 80017ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80017b2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80017b6:	2100      	movs	r1, #0
 80017b8:	9101      	str	r1, [sp, #4]
 80017ba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80017be:	9100      	str	r1, [sp, #0]
 80017c0:	ed97 0a20 	vldr	s0, [r7, #128]	@ 0x80
 80017c4:	4934      	ldr	r1, [pc, #208]	@ (8001898 <test_nepali+0x340>)
 80017c6:	4837      	ldr	r0, [pc, #220]	@ (80018a4 <test_nepali+0x34c>)
 80017c8:	f7ff f8ae 	bl	8000928 <ILI9341_PreetiText>
	HAL_Delay(5000);
 80017cc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80017d0:	f000 fa6e 	bl	8001cb0 <HAL_Delay>

	/*Test varnamala*/
	i = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	while(i < 3)
 80017da:	e10e      	b.n	80019fa <test_nepali+0x4a2>
	{
	  uint16_t x = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
	  uint8_t y = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	  uint8_t j = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

	  ILI9341_FillScreen(BLACK);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7ff fcc2 	bl	8001178 <ILI9341_FillScreen>
	  while(j<len_spc)
 80017f4:	e0f1      	b.n	80019da <test_nepali+0x482>
	  {
		  if (i == 0 && j <14)
 80017f6:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d118      	bne.n	8001830 <test_nepali+0x2d8>
 80017fe:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001802:	2b0d      	cmp	r3, #13
 8001804:	d814      	bhi.n	8001830 <test_nepali+0x2d8>
		  {
			  word[0] = nepali[tst[i]];
 8001806:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800180a:	3390      	adds	r3, #144	@ 0x90
 800180c:	443b      	add	r3, r7
 800180e:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001812:	3390      	adds	r3, #144	@ 0x90
 8001814:	443b      	add	r3, r7
 8001816:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800181a:	713b      	strb	r3, [r7, #4]
			  word[1] = spc[j];
 800181c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001820:	3390      	adds	r3, #144	@ 0x90
 8001822:	443b      	add	r3, r7
 8001824:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8001828:	717b      	strb	r3, [r7, #5]
			  word[2] = '\0';
 800182a:	2300      	movs	r3, #0
 800182c:	71bb      	strb	r3, [r7, #6]
 800182e:	e091      	b.n	8001954 <test_nepali+0x3fc>
		  }
		  else if (i == 0 && j >13)
 8001830:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001834:	2b00      	cmp	r3, #0
 8001836:	d137      	bne.n	80018a8 <test_nepali+0x350>
 8001838:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800183c:	2b0d      	cmp	r3, #13
 800183e:	d933      	bls.n	80018a8 <test_nepali+0x350>
		  {
			  word[0] = nepali[tst[i]];
 8001840:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001844:	3390      	adds	r3, #144	@ 0x90
 8001846:	443b      	add	r3, r7
 8001848:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 800184c:	3390      	adds	r3, #144	@ 0x90
 800184e:	443b      	add	r3, r7
 8001850:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001854:	713b      	strb	r3, [r7, #4]
			  word[1] = spc[j];
 8001856:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800185a:	3390      	adds	r3, #144	@ 0x90
 800185c:	443b      	add	r3, r7
 800185e:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8001862:	717b      	strb	r3, [r7, #5]
			  word[2] = spc[j+1];
 8001864:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001868:	3301      	adds	r3, #1
 800186a:	3390      	adds	r3, #144	@ 0x90
 800186c:	443b      	add	r3, r7
 800186e:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8001872:	71bb      	strb	r3, [r7, #6]
			  word[3] = '\0';
 8001874:	2300      	movs	r3, #0
 8001876:	71fb      	strb	r3, [r7, #7]
			  j++;
 8001878:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800187c:	3301      	adds	r3, #1
 800187e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001882:	e067      	b.n	8001954 <test_nepali+0x3fc>
 8001884:	08003600 	.word	0x08003600
 8001888:	0800362c 	.word	0x0800362c
 800188c:	08003648 	.word	0x08003648
 8001890:	0800365c 	.word	0x0800365c
 8001894:	08003664 	.word	0x08003664
 8001898:	08003694 	.word	0x08003694
 800189c:	08003670 	.word	0x08003670
 80018a0:	43a00000 	.word	0x43a00000
 80018a4:	080035fc 	.word	0x080035fc
		  }
		  else if (i > 0 && j >13)
 80018a8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d031      	beq.n	8001914 <test_nepali+0x3bc>
 80018b0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80018b4:	2b0d      	cmp	r3, #13
 80018b6:	d92d      	bls.n	8001914 <test_nepali+0x3bc>
		  {
			  word[0] = nepali[tst[i]];
 80018b8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80018bc:	3390      	adds	r3, #144	@ 0x90
 80018be:	443b      	add	r3, r7
 80018c0:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 80018c4:	3390      	adds	r3, #144	@ 0x90
 80018c6:	443b      	add	r3, r7
 80018c8:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80018cc:	713b      	strb	r3, [r7, #4]
			  word[1] = nepali[tst[i]+1];
 80018ce:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80018d2:	3390      	adds	r3, #144	@ 0x90
 80018d4:	443b      	add	r3, r7
 80018d6:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 80018da:	3301      	adds	r3, #1
 80018dc:	3390      	adds	r3, #144	@ 0x90
 80018de:	443b      	add	r3, r7
 80018e0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80018e4:	717b      	strb	r3, [r7, #5]
			  word[2] = spc[j];
 80018e6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80018ea:	3390      	adds	r3, #144	@ 0x90
 80018ec:	443b      	add	r3, r7
 80018ee:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 80018f2:	71bb      	strb	r3, [r7, #6]
			  word[3] = spc[j+1];
 80018f4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80018f8:	3301      	adds	r3, #1
 80018fa:	3390      	adds	r3, #144	@ 0x90
 80018fc:	443b      	add	r3, r7
 80018fe:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8001902:	71fb      	strb	r3, [r7, #7]
			  word[4] = '\0';
 8001904:	2300      	movs	r3, #0
 8001906:	723b      	strb	r3, [r7, #8]
			  j++;
 8001908:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800190c:	3301      	adds	r3, #1
 800190e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001912:	e01f      	b.n	8001954 <test_nepali+0x3fc>
		  }
		  else
		  {
			  word[0] = nepali[tst[i]];
 8001914:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001918:	3390      	adds	r3, #144	@ 0x90
 800191a:	443b      	add	r3, r7
 800191c:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001920:	3390      	adds	r3, #144	@ 0x90
 8001922:	443b      	add	r3, r7
 8001924:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001928:	713b      	strb	r3, [r7, #4]
			  word[1] = nepali[tst[i]+1];
 800192a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800192e:	3390      	adds	r3, #144	@ 0x90
 8001930:	443b      	add	r3, r7
 8001932:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001936:	3301      	adds	r3, #1
 8001938:	3390      	adds	r3, #144	@ 0x90
 800193a:	443b      	add	r3, r7
 800193c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001940:	717b      	strb	r3, [r7, #5]
			  word[2] = spc[j];
 8001942:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001946:	3390      	adds	r3, #144	@ 0x90
 8001948:	443b      	add	r3, r7
 800194a:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 800194e:	71bb      	strb	r3, [r7, #6]
			  word[3] = '\0';
 8001950:	2300      	movs	r3, #0
 8001952:	71fb      	strb	r3, [r7, #7]
		  }

		  ILI9341_PreetiText(word, PREETI, scale ,x,y, WHITE, BLACK);
 8001954:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001958:	b29b      	uxth	r3, r3
 800195a:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 800195e:	1d38      	adds	r0, r7, #4
 8001960:	2100      	movs	r1, #0
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001968:	9100      	str	r1, [sp, #0]
 800196a:	ed97 0a20 	vldr	s0, [r7, #128]	@ 0x80
 800196e:	4928      	ldr	r1, [pc, #160]	@ (8001a10 <test_nepali+0x4b8>)
 8001970:	f7fe ffda 	bl	8000928 <ILI9341_PreetiText>
		  x += fWidth +10;
 8001974:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001978:	b29a      	uxth	r2, r3
 800197a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800197e:	4413      	add	r3, r2
 8001980:	b29b      	uxth	r3, r3
 8001982:	330a      	adds	r3, #10
 8001984:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
		  if(x > (320/scale - (fWidth+10))){x = 0; y += fHeight;}
 8001988:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001994:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8001a14 <test_nepali+0x4bc>
 8001998:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800199c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80019a0:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80019a4:	330a      	adds	r3, #10
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	dd09      	ble.n	80019d0 <test_nepali+0x478>
 80019bc:	2300      	movs	r3, #0
 80019be:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80019c2:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80019c6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80019ca:	4413      	add	r3, r2
 80019cc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		  j++;
 80019d0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80019d4:	3301      	adds	r3, #1
 80019d6:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
	  while(j<len_spc)
 80019da:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 80019de:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80019e2:	429a      	cmp	r2, r3
 80019e4:	f4ff af07 	bcc.w	80017f6 <test_nepali+0x29e>
	  }

	  HAL_Delay(10000);
 80019e8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80019ec:	f000 f960 	bl	8001cb0 <HAL_Delay>
	  i++;
 80019f0:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80019f4:	3301      	adds	r3, #1
 80019f6:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	while(i < 3)
 80019fa:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	f67f aeec 	bls.w	80017dc <test_nepali+0x284>
//	/*Print Hello World*/
//	ILI9341_FillScreen(BLACK);
//	x = 0; y = 0;
//	ILI9341_PreetiText("x]Nnf] jf]N8{", PREETI,1,x,y, WHITE, BLACK);

}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3790      	adds	r7, #144	@ 0x90
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	08003694 	.word	0x08003694
 8001a14:	43a00000 	.word	0x43a00000

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <Error_Handler+0x8>

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000

08001a6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a17      	ldr	r2, [pc, #92]	@ (8001ae8 <HAL_SPI_MspInit+0x7c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d128      	bne.n	8001ae0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a8e:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <HAL_SPI_MspInit+0x80>)
 8001a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a92:	4a16      	ldr	r2, [pc, #88]	@ (8001aec <HAL_SPI_MspInit+0x80>)
 8001a94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a9a:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <HAL_SPI_MspInit+0x80>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <HAL_SPI_MspInit+0x80>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	4a10      	ldr	r2, [pc, #64]	@ (8001aec <HAL_SPI_MspInit+0x80>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_SPI_MspInit+0x80>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001abe:	2382      	movs	r3, #130	@ 0x82
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ace:	2305      	movs	r3, #5
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001adc:	f000 f9f2 	bl	8001ec4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	@ 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40013000 	.word	0x40013000
 8001aec:	40021000 	.word	0x40021000

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <NMI_Handler+0x4>

08001af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <MemManage_Handler+0x4>

08001b08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b46:	f000 f893 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <SystemInit+0x20>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5a:	4a05      	ldr	r2, [pc, #20]	@ (8001b70 <SystemInit+0x20>)
 8001b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b78:	f7ff ffea 	bl	8001b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	@ (8001bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <LoopForever+0xe>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc0 <LoopForever+0x16>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f001 fcfb 	bl	800359c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ba6:	f7ff fbcf 	bl	8001348 <main>

08001baa <LoopForever>:

LoopForever:
    b LoopForever
 8001baa:	e7fe      	b.n	8001baa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001bb8:	08013b28 	.word	0x08013b28
  ldr r2, =_sbss
 8001bbc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001bc0:	20000094 	.word	0x20000094

08001bc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_IRQHandler>

08001bc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 f943 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 f80e 	bl	8001bf8 <HAL_InitTick>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	71fb      	strb	r3, [r7, #7]
 8001be6:	e001      	b.n	8001bec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be8:	f7ff ff1c 	bl	8001a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bec:	79fb      	ldrb	r3, [r7, #7]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c04:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <HAL_InitTick+0x6c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d023      	beq.n	8001c54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <HAL_InitTick+0x70>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <HAL_InitTick+0x6c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f941 	bl	8001eaa <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10f      	bne.n	8001c4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d809      	bhi.n	8001c48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f000 f919 	bl	8001e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c40:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <HAL_InitTick+0x74>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e007      	b.n	8001c58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e004      	b.n	8001c58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e001      	b.n	8001c58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000000c 	.word	0x2000000c
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	20000008 	.word	0x20000008

08001c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_IncTick+0x20>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_IncTick+0x24>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <HAL_IncTick+0x24>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	20000090 	.word	0x20000090

08001c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	@ (8001cac <HAL_GetTick+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000090 	.word	0x20000090

08001cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff ffee 	bl	8001c98 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d005      	beq.n	8001cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cca:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <HAL_Delay+0x44>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd6:	bf00      	nop
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d8f7      	bhi.n	8001cd8 <HAL_Delay+0x28>
  {
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000000c 	.word	0x2000000c

08001cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	@ (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	@ 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff8e 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff47 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff5c 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff8e 	bl	8001db0 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5d 	bl	8001d5c <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffb0 	bl	8001e18 <SysTick_Config>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed2:	e148      	b.n	8002166 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 813a 	beq.w	8002160 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d005      	beq.n	8001f04 <HAL_GPIO_Init+0x40>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d130      	bne.n	8001f66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	f003 0201 	and.w	r2, r3, #1
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d017      	beq.n	8001fa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d123      	bne.n	8001ff6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	6939      	ldr	r1, [r7, #16]
 8001ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0203 	and.w	r2, r3, #3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8094 	beq.w	8002160 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002038:	4b52      	ldr	r3, [pc, #328]	@ (8002184 <HAL_GPIO_Init+0x2c0>)
 800203a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203c:	4a51      	ldr	r2, [pc, #324]	@ (8002184 <HAL_GPIO_Init+0x2c0>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6613      	str	r3, [r2, #96]	@ 0x60
 8002044:	4b4f      	ldr	r3, [pc, #316]	@ (8002184 <HAL_GPIO_Init+0x2c0>)
 8002046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002050:	4a4d      	ldr	r2, [pc, #308]	@ (8002188 <HAL_GPIO_Init+0x2c4>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	220f      	movs	r2, #15
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800207a:	d00d      	beq.n	8002098 <HAL_GPIO_Init+0x1d4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a43      	ldr	r2, [pc, #268]	@ (800218c <HAL_GPIO_Init+0x2c8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d007      	beq.n	8002094 <HAL_GPIO_Init+0x1d0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a42      	ldr	r2, [pc, #264]	@ (8002190 <HAL_GPIO_Init+0x2cc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_GPIO_Init+0x1cc>
 800208c:	2302      	movs	r3, #2
 800208e:	e004      	b.n	800209a <HAL_GPIO_Init+0x1d6>
 8002090:	2307      	movs	r3, #7
 8002092:	e002      	b.n	800209a <HAL_GPIO_Init+0x1d6>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_GPIO_Init+0x1d6>
 8002098:	2300      	movs	r3, #0
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	f002 0203 	and.w	r2, r2, #3
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4093      	lsls	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020aa:	4937      	ldr	r1, [pc, #220]	@ (8002188 <HAL_GPIO_Init+0x2c4>)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b8:	4b36      	ldr	r3, [pc, #216]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002106:	4a23      	ldr	r2, [pc, #140]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800210c:	4b21      	ldr	r3, [pc, #132]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002130:	4a18      	ldr	r2, [pc, #96]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800215a:	4a0e      	ldr	r2, [pc, #56]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f47f aeaf 	bne.w	8001ed4 <HAL_GPIO_Init+0x10>
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	48000400 	.word	0x48000400
 8002190:	48000800 	.word	0x48000800
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
 80021a4:	4613      	mov	r3, r2
 80021a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a8:	787b      	ldrb	r3, [r7, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021cc:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40007000 	.word	0x40007000

080021e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021f2:	d130      	bne.n	8002256 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f4:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002200:	d038      	beq.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800220a:	4a1e      	ldr	r2, [pc, #120]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002212:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2232      	movs	r2, #50	@ 0x32
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	4a1b      	ldr	r2, [pc, #108]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0c9b      	lsrs	r3, r3, #18
 8002224:	3301      	adds	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002228:	e002      	b.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3b01      	subs	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800223c:	d102      	bne.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x60>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f2      	bne.n	800222a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002250:	d110      	bne.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e00f      	b.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002256:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800225e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002262:	d007      	beq.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002264:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800226c:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002272:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40007000 	.word	0x40007000
 8002288:	20000004 	.word	0x20000004
 800228c:	431bde83 	.word	0x431bde83

08002290 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	f000 bc02 	b.w	8002aa8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a4:	4b96      	ldr	r3, [pc, #600]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ae:	4b94      	ldr	r3, [pc, #592]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80e4 	beq.w	800248e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <HAL_RCC_OscConfig+0x4c>
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	f040 808b 	bne.w	80023ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	f040 8087 	bne.w	80023ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022dc:	4b88      	ldr	r3, [pc, #544]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_OscConfig+0x64>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e3d9      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	4b81      	ldr	r3, [pc, #516]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <HAL_RCC_OscConfig+0x7e>
 8002304:	4b7e      	ldr	r3, [pc, #504]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800230c:	e005      	b.n	800231a <HAL_RCC_OscConfig+0x8a>
 800230e:	4b7c      	ldr	r3, [pc, #496]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800231a:	4293      	cmp	r3, r2
 800231c:	d223      	bcs.n	8002366 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fd54 	bl	8002dd0 <RCC_SetFlashLatencyFromMSIRange>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e3ba      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002332:	4b73      	ldr	r3, [pc, #460]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a72      	ldr	r2, [pc, #456]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002338:	f043 0308 	orr.w	r3, r3, #8
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b70      	ldr	r3, [pc, #448]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	496d      	ldr	r1, [pc, #436]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002350:	4b6b      	ldr	r3, [pc, #428]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	4968      	ldr	r1, [pc, #416]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
 8002364:	e025      	b.n	80023b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002366:	4b66      	ldr	r3, [pc, #408]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a65      	ldr	r2, [pc, #404]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b63      	ldr	r3, [pc, #396]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4960      	ldr	r1, [pc, #384]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002384:	4b5e      	ldr	r3, [pc, #376]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	495b      	ldr	r1, [pc, #364]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fd14 	bl	8002dd0 <RCC_SetFlashLatencyFromMSIRange>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e37a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023b2:	f000 fc81 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4b51      	ldr	r3, [pc, #324]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	4950      	ldr	r1, [pc, #320]	@ (8002504 <HAL_RCC_OscConfig+0x274>)
 80023c4:	5ccb      	ldrb	r3, [r1, r3]
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	4a4e      	ldr	r2, [pc, #312]	@ (8002508 <HAL_RCC_OscConfig+0x278>)
 80023d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023d2:	4b4e      	ldr	r3, [pc, #312]	@ (800250c <HAL_RCC_OscConfig+0x27c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fc0e 	bl	8001bf8 <HAL_InitTick>
 80023dc:	4603      	mov	r3, r0
 80023de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d052      	beq.n	800248c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	e35e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d032      	beq.n	8002458 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023f2:	4b43      	ldr	r3, [pc, #268]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a42      	ldr	r2, [pc, #264]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fe:	f7ff fc4b 	bl	8001c98 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002406:	f7ff fc47 	bl	8001c98 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e347      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002418:	4b39      	ldr	r3, [pc, #228]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002424:	4b36      	ldr	r3, [pc, #216]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a35      	ldr	r2, [pc, #212]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b33      	ldr	r3, [pc, #204]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4930      	ldr	r1, [pc, #192]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002442:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	492b      	ldr	r1, [pc, #172]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
 8002456:	e01a      	b.n	800248e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002458:	4b29      	ldr	r3, [pc, #164]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a28      	ldr	r2, [pc, #160]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002464:	f7ff fc18 	bl	8001c98 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800246c:	f7ff fc14 	bl	8001c98 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e314      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x1dc>
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800248c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d073      	beq.n	8002582 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d005      	beq.n	80024ac <HAL_RCC_OscConfig+0x21c>
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d10e      	bne.n	80024c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d063      	beq.n	8002580 <HAL_RCC_OscConfig+0x2f0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d15f      	bne.n	8002580 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e2f1      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x24c>
 80024ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e025      	b.n	8002528 <HAL_RCC_OscConfig+0x298>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e4:	d114      	bne.n	8002510 <HAL_RCC_OscConfig+0x280>
 80024e6:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a05      	ldr	r2, [pc, #20]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b03      	ldr	r3, [pc, #12]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a02      	ldr	r2, [pc, #8]	@ (8002500 <HAL_RCC_OscConfig+0x270>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e013      	b.n	8002528 <HAL_RCC_OscConfig+0x298>
 8002500:	40021000 	.word	0x40021000
 8002504:	08013ad8 	.word	0x08013ad8
 8002508:	20000004 	.word	0x20000004
 800250c:	20000008 	.word	0x20000008
 8002510:	4ba0      	ldr	r3, [pc, #640]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a9f      	ldr	r2, [pc, #636]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b9d      	ldr	r3, [pc, #628]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a9c      	ldr	r2, [pc, #624]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff fbb2 	bl	8001c98 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff fbae 	bl	8001c98 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	@ 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e2ae      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254a:	4b92      	ldr	r3, [pc, #584]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x2a8>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7ff fb9e 	bl	8001c98 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fb9a 	bl	8001c98 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	@ 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e29a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002572:	4b88      	ldr	r3, [pc, #544]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x2d0>
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d060      	beq.n	8002650 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_OscConfig+0x310>
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d119      	bne.n	80025ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d116      	bne.n	80025ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_OscConfig+0x328>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e277      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b76      	ldr	r3, [pc, #472]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	4973      	ldr	r1, [pc, #460]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025cc:	e040      	b.n	8002650 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d023      	beq.n	800261e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6e      	ldr	r2, [pc, #440]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7ff fb59 	bl	8001c98 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7ff fb55 	bl	8001c98 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e255      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fc:	4b65      	ldr	r3, [pc, #404]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	4b62      	ldr	r3, [pc, #392]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	495f      	ldr	r1, [pc, #380]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	e018      	b.n	8002650 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261e:	4b5d      	ldr	r3, [pc, #372]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a5c      	ldr	r2, [pc, #368]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7ff fb35 	bl	8001c98 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002632:	f7ff fb31 	bl	8001c98 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e231      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002644:	4b53      	ldr	r3, [pc, #332]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01c      	beq.n	800269e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002664:	4b4b      	ldr	r3, [pc, #300]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266a:	4a4a      	ldr	r2, [pc, #296]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7ff fb10 	bl	8001c98 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267c:	f7ff fb0c 	bl	8001c98 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e20c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800268e:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002690:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCC_OscConfig+0x3ec>
 800269c:	e01b      	b.n	80026d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269e:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7ff faf3 	bl	8001c98 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7ff faef 	bl	8001c98 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1ef      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c8:	4b32      	ldr	r3, [pc, #200]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ef      	bne.n	80026b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80a6 	beq.w	8002830 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f8:	4a26      	ldr	r2, [pc, #152]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002700:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270c:	2301      	movs	r3, #1
 800270e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002710:	4b21      	ldr	r3, [pc, #132]	@ (8002798 <HAL_RCC_OscConfig+0x508>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d118      	bne.n	800274e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271c:	4b1e      	ldr	r3, [pc, #120]	@ (8002798 <HAL_RCC_OscConfig+0x508>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1d      	ldr	r2, [pc, #116]	@ (8002798 <HAL_RCC_OscConfig+0x508>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002726:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002728:	f7ff fab6 	bl	8001c98 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002730:	f7ff fab2 	bl	8001c98 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e1b2      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002742:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <HAL_RCC_OscConfig+0x508>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d108      	bne.n	8002768 <HAL_RCC_OscConfig+0x4d8>
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275c:	4a0d      	ldr	r2, [pc, #52]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002766:	e029      	b.n	80027bc <HAL_RCC_OscConfig+0x52c>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d115      	bne.n	800279c <HAL_RCC_OscConfig+0x50c>
 8002770:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002776:	4a07      	ldr	r2, [pc, #28]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	4a03      	ldr	r2, [pc, #12]	@ (8002794 <HAL_RCC_OscConfig+0x504>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x52c>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
 800279c:	4b9a      	ldr	r3, [pc, #616]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a2:	4a99      	ldr	r2, [pc, #612]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027ac:	4b96      	ldr	r3, [pc, #600]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	4a95      	ldr	r2, [pc, #596]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d016      	beq.n	80027f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7ff fa68 	bl	8001c98 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7ff fa64 	bl	8001c98 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e162      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e2:	4b89      	ldr	r3, [pc, #548]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ed      	beq.n	80027cc <HAL_RCC_OscConfig+0x53c>
 80027f0:	e015      	b.n	800281e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7ff fa51 	bl	8001c98 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7ff fa4d 	bl	8001c98 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e14b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002810:	4b7d      	ldr	r3, [pc, #500]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ed      	bne.n	80027fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281e:	7ffb      	ldrb	r3, [r7, #31]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b78      	ldr	r3, [pc, #480]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002828:	4a77      	ldr	r2, [pc, #476]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d03c      	beq.n	80028b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01c      	beq.n	800287e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002844:	4b70      	ldr	r3, [pc, #448]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800284a:	4a6f      	ldr	r2, [pc, #444]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7ff fa20 	bl	8001c98 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800285c:	f7ff fa1c 	bl	8001c98 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e11c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800286e:	4b66      	ldr	r3, [pc, #408]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002870:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ef      	beq.n	800285c <HAL_RCC_OscConfig+0x5cc>
 800287c:	e01b      	b.n	80028b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800287e:	4b62      	ldr	r3, [pc, #392]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002880:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002884:	4a60      	ldr	r2, [pc, #384]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7ff fa03 	bl	8001c98 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002896:	f7ff f9ff 	bl	8001c98 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e0ff      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028a8:	4b57      	ldr	r3, [pc, #348]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80028aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ef      	bne.n	8002896 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80f3 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	f040 80c9 	bne.w	8002a5c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0203 	and.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	429a      	cmp	r2, r3
 80028dc:	d12c      	bne.n	8002938 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	3b01      	subs	r3, #1
 80028ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d123      	bne.n	8002938 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d11b      	bne.n	8002938 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d113      	bne.n	8002938 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	3b01      	subs	r3, #1
 800291e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d109      	bne.n	8002938 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	3b01      	subs	r3, #1
 8002932:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d06b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d062      	beq.n	8002a04 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800293e:	4b32      	ldr	r3, [pc, #200]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0ac      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800294e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a2d      	ldr	r2, [pc, #180]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002954:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002958:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800295a:	f7ff f99d 	bl	8001c98 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7ff f999 	bl	8001c98 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e099      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002974:	4b24      	ldr	r3, [pc, #144]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002980:	4b21      	ldr	r3, [pc, #132]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_RCC_OscConfig+0x77c>)
 8002986:	4013      	ands	r3, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002990:	3a01      	subs	r2, #1
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	4311      	orrs	r1, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800299a:	0212      	lsls	r2, r2, #8
 800299c:	4311      	orrs	r1, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029a2:	0852      	lsrs	r2, r2, #1
 80029a4:	3a01      	subs	r2, #1
 80029a6:	0552      	lsls	r2, r2, #21
 80029a8:	4311      	orrs	r1, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029ae:	0852      	lsrs	r2, r2, #1
 80029b0:	3a01      	subs	r2, #1
 80029b2:	0652      	lsls	r2, r2, #25
 80029b4:	4311      	orrs	r1, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029ba:	06d2      	lsls	r2, r2, #27
 80029bc:	430a      	orrs	r2, r1
 80029be:	4912      	ldr	r1, [pc, #72]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029c4:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80029ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80029d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029dc:	f7ff f95c 	bl	8001c98 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7ff f958 	bl	8001c98 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e058      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f6:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <HAL_RCC_OscConfig+0x778>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a02:	e050      	b.n	8002aa6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e04f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a10:	4b27      	ldr	r3, [pc, #156]	@ (8002ab0 <HAL_RCC_OscConfig+0x820>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d144      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b24      	ldr	r3, [pc, #144]	@ (8002ab0 <HAL_RCC_OscConfig+0x820>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a23      	ldr	r2, [pc, #140]	@ (8002ab0 <HAL_RCC_OscConfig+0x820>)
 8002a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a28:	4b21      	ldr	r3, [pc, #132]	@ (8002ab0 <HAL_RCC_OscConfig+0x820>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a20      	ldr	r2, [pc, #128]	@ (8002ab0 <HAL_RCC_OscConfig+0x820>)
 8002a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a34:	f7ff f930 	bl	8001c98 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7ff f92c 	bl	8001c98 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e02c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4e:	4b18      	ldr	r3, [pc, #96]	@ (8002ab0 <HAL_RCC_OscConfig+0x820>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x7ac>
 8002a5a:	e024      	b.n	8002aa6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d01f      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b13      	ldr	r3, [pc, #76]	@ (8002ab0 <HAL_RCC_OscConfig+0x820>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a12      	ldr	r2, [pc, #72]	@ (8002ab0 <HAL_RCC_OscConfig+0x820>)
 8002a68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7ff f913 	bl	8001c98 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7ff f90f 	bl	8001c98 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e00f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a88:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCC_OscConfig+0x820>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a94:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <HAL_RCC_OscConfig+0x820>)
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	4905      	ldr	r1, [pc, #20]	@ (8002ab0 <HAL_RCC_OscConfig+0x820>)
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_RCC_OscConfig+0x824>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
 8002aa0:	e001      	b.n	8002aa6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3720      	adds	r7, #32
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	feeefffc 	.word	0xfeeefffc

08002ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0e7      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002acc:	4b75      	ldr	r3, [pc, #468]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d910      	bls.n	8002afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b72      	ldr	r3, [pc, #456]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 0207 	bic.w	r2, r3, #7
 8002ae2:	4970      	ldr	r1, [pc, #448]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cf      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d010      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4b66      	ldr	r3, [pc, #408]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d908      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b63      	ldr	r3, [pc, #396]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4960      	ldr	r1, [pc, #384]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d04c      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d121      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0a6      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b56:	4b54      	ldr	r3, [pc, #336]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d115      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e09a      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e08e      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e086      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b8e:	4b46      	ldr	r3, [pc, #280]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4943      	ldr	r1, [pc, #268]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba0:	f7ff f87a 	bl	8001c98 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7ff f876 	bl	8001c98 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e06e      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 020c 	and.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1eb      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d010      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d208      	bcs.n	8002bfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	492b      	ldr	r1, [pc, #172]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfe:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d210      	bcs.n	8002c2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 0207 	bic.w	r2, r3, #7
 8002c14:	4923      	ldr	r1, [pc, #140]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e036      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4918      	ldr	r1, [pc, #96]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c58:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4910      	ldr	r1, [pc, #64]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c6c:	f000 f824 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	490b      	ldr	r1, [pc, #44]	@ (8002cac <HAL_RCC_ClockConfig+0x1f4>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
 8002c88:	4a09      	ldr	r2, [pc, #36]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1fc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe ffb1 	bl	8001bf8 <HAL_InitTick>
 8002c96:	4603      	mov	r3, r0
 8002c98:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40022000 	.word	0x40022000
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	08013ad8 	.word	0x08013ad8
 8002cb0:	20000004 	.word	0x20000004
 8002cb4:	20000008 	.word	0x20000008

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x34>
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d121      	bne.n	8002d2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d11e      	bne.n	8002d2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cec:	4b34      	ldr	r3, [pc, #208]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cf8:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e005      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d08:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d14:	4a2b      	ldr	r2, [pc, #172]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	e004      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d3c:	4b23      	ldr	r3, [pc, #140]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d134      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d46:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d003      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0xa6>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d003      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0xac>
 8002d5c:	e005      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d60:	617b      	str	r3, [r7, #20]
      break;
 8002d62:	e005      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d64:	4b19      	ldr	r3, [pc, #100]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d66:	617b      	str	r3, [r7, #20]
      break;
 8002d68:	e002      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	617b      	str	r3, [r7, #20]
      break;
 8002d6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d70:	4b13      	ldr	r3, [pc, #76]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	fb03 f202 	mul.w	r2, r3, r2
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	0e5b      	lsrs	r3, r3, #25
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	3301      	adds	r3, #1
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002db0:	69bb      	ldr	r3, [r7, #24]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	@ 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	08013ae8 	.word	0x08013ae8
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	007a1200 	.word	0x007a1200

08002dd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002de8:	f7ff f9ee 	bl	80021c8 <HAL_PWREx_GetVoltageRange>
 8002dec:	6178      	str	r0, [r7, #20]
 8002dee:	e014      	b.n	8002e1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	4b25      	ldr	r3, [pc, #148]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	4a24      	ldr	r2, [pc, #144]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dfc:	4b22      	ldr	r3, [pc, #136]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e08:	f7ff f9de 	bl	80021c8 <HAL_PWREx_GetVoltageRange>
 8002e0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e12:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e20:	d10b      	bne.n	8002e3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b80      	cmp	r3, #128	@ 0x80
 8002e26:	d919      	bls.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e2c:	d902      	bls.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e2e:	2302      	movs	r3, #2
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	e013      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e34:	2301      	movs	r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	e010      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b80      	cmp	r3, #128	@ 0x80
 8002e3e:	d902      	bls.n	8002e46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e40:	2303      	movs	r3, #3
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	e00a      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b80      	cmp	r3, #128	@ 0x80
 8002e4a:	d102      	bne.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e004      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b70      	cmp	r3, #112	@ 0x70
 8002e56:	d101      	bne.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e58:	2301      	movs	r3, #1
 8002e5a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 0207 	bic.w	r2, r3, #7
 8002e64:	4909      	ldr	r1, [pc, #36]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e6c:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d001      	beq.n	8002e7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40022000 	.word	0x40022000

08002e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e095      	b.n	8002fce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d108      	bne.n	8002ebc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eb2:	d009      	beq.n	8002ec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
 8002eba:	e005      	b.n	8002ec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe fdc2 	bl	8001a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002efe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f08:	d902      	bls.n	8002f10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	e002      	b.n	8002f16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f1e:	d007      	beq.n	8002f30 <HAL_SPI_Init+0xa0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f28:	d002      	beq.n	8002f30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f72:	ea42 0103 	orr.w	r1, r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	0c1b      	lsrs	r3, r3, #16
 8002f8c:	f003 0204 	and.w	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002fac:	ea42 0103 	orr.w	r1, r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b088      	sub	sp, #32
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe6:	f7fe fe57 	bl	8001c98 <HAL_GetTick>
 8002fea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d001      	beq.n	8003000 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e15c      	b.n	80032ba <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_SPI_Transmit+0x36>
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e154      	b.n	80032ba <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_SPI_Transmit+0x48>
 800301a:	2302      	movs	r3, #2
 800301c:	e14d      	b.n	80032ba <HAL_SPI_Transmit+0x2e4>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2203      	movs	r2, #3
 800302a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003070:	d10f      	bne.n	8003092 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003080:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003090:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309c:	2b40      	cmp	r3, #64	@ 0x40
 800309e:	d007      	beq.n	80030b0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030b8:	d952      	bls.n	8003160 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_SPI_Transmit+0xf2>
 80030c2:	8b7b      	ldrh	r3, [r7, #26]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d145      	bne.n	8003154 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030cc:	881a      	ldrh	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	1c9a      	adds	r2, r3, #2
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030ec:	e032      	b.n	8003154 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d112      	bne.n	8003122 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	1c9a      	adds	r2, r3, #2
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003120:	e018      	b.n	8003154 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003122:	f7fe fdb9 	bl	8001c98 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d803      	bhi.n	800313a <HAL_SPI_Transmit+0x164>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d102      	bne.n	8003140 <HAL_SPI_Transmit+0x16a>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e0b2      	b.n	80032ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1c7      	bne.n	80030ee <HAL_SPI_Transmit+0x118>
 800315e:	e083      	b.n	8003268 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_SPI_Transmit+0x198>
 8003168:	8b7b      	ldrh	r3, [r7, #26]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d177      	bne.n	800325e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d912      	bls.n	800319e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317c:	881a      	ldrh	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003188:	1c9a      	adds	r2, r3, #2
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b02      	subs	r3, #2
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800319c:	e05f      	b.n	800325e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	330c      	adds	r3, #12
 80031a8:	7812      	ldrb	r2, [r2, #0]
 80031aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031c4:	e04b      	b.n	800325e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d12b      	bne.n	800322c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d912      	bls.n	8003204 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e2:	881a      	ldrh	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ee:	1c9a      	adds	r2, r3, #2
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b02      	subs	r3, #2
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003202:	e02c      	b.n	800325e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	330c      	adds	r3, #12
 800320e:	7812      	ldrb	r2, [r2, #0]
 8003210:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800322a:	e018      	b.n	800325e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800322c:	f7fe fd34 	bl	8001c98 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d803      	bhi.n	8003244 <HAL_SPI_Transmit+0x26e>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d102      	bne.n	800324a <HAL_SPI_Transmit+0x274>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e02d      	b.n	80032ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ae      	bne.n	80031c6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f947 	bl	8003500 <SPI_EndRxTxTransaction>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3720      	adds	r7, #32
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032d4:	f7fe fce0 	bl	8001c98 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	4413      	add	r3, r2
 80032e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032e4:	f7fe fcd8 	bl	8001c98 <HAL_GetTick>
 80032e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032ea:	4b39      	ldr	r3, [pc, #228]	@ (80033d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	015b      	lsls	r3, r3, #5
 80032f0:	0d1b      	lsrs	r3, r3, #20
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	fb02 f303 	mul.w	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032fa:	e054      	b.n	80033a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d050      	beq.n	80033a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003304:	f7fe fcc8 	bl	8001c98 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	429a      	cmp	r2, r3
 8003312:	d902      	bls.n	800331a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d13d      	bne.n	8003396 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003332:	d111      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800333c:	d004      	beq.n	8003348 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003346:	d107      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003360:	d10f      	bne.n	8003382 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e017      	b.n	80033c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d19b      	bne.n	80032fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000004 	.word	0x20000004

080033d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033e6:	f7fe fc57 	bl	8001c98 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80033f6:	f7fe fc4f 	bl	8001c98 <HAL_GetTick>
 80033fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003404:	4b3d      	ldr	r3, [pc, #244]	@ (80034fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	00da      	lsls	r2, r3, #3
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	0d1b      	lsrs	r3, r3, #20
 8003414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800341c:	e060      	b.n	80034e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003424:	d107      	bne.n	8003436 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d104      	bne.n	8003436 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003434:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343c:	d050      	beq.n	80034e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800343e:	f7fe fc2b 	bl	8001c98 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800344a:	429a      	cmp	r2, r3
 800344c:	d902      	bls.n	8003454 <SPI_WaitFifoStateUntilTimeout+0x80>
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	d13d      	bne.n	80034d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003462:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800346c:	d111      	bne.n	8003492 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003476:	d004      	beq.n	8003482 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003480:	d107      	bne.n	8003492 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003490:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800349a:	d10f      	bne.n	80034bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e010      	b.n	80034f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	3b01      	subs	r3, #1
 80034de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d196      	bne.n	800341e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3728      	adds	r7, #40	@ 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000004 	.word	0x20000004

08003500 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2200      	movs	r2, #0
 8003514:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff ff5b 	bl	80033d4 <SPI_WaitFifoStateUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e027      	b.n	8003584 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2200      	movs	r2, #0
 800353c:	2180      	movs	r1, #128	@ 0x80
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff fec0 	bl	80032c4 <SPI_WaitFlagStateUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354e:	f043 0220 	orr.w	r2, r3, #32
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e014      	b.n	8003584 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2200      	movs	r2, #0
 8003562:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff ff34 	bl	80033d4 <SPI_WaitFifoStateUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e000      	b.n	8003584 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <memset>:
 800358c:	4402      	add	r2, r0
 800358e:	4603      	mov	r3, r0
 8003590:	4293      	cmp	r3, r2
 8003592:	d100      	bne.n	8003596 <memset+0xa>
 8003594:	4770      	bx	lr
 8003596:	f803 1b01 	strb.w	r1, [r3], #1
 800359a:	e7f9      	b.n	8003590 <memset+0x4>

0800359c <__libc_init_array>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	4d0d      	ldr	r5, [pc, #52]	@ (80035d4 <__libc_init_array+0x38>)
 80035a0:	4c0d      	ldr	r4, [pc, #52]	@ (80035d8 <__libc_init_array+0x3c>)
 80035a2:	1b64      	subs	r4, r4, r5
 80035a4:	10a4      	asrs	r4, r4, #2
 80035a6:	2600      	movs	r6, #0
 80035a8:	42a6      	cmp	r6, r4
 80035aa:	d109      	bne.n	80035c0 <__libc_init_array+0x24>
 80035ac:	4d0b      	ldr	r5, [pc, #44]	@ (80035dc <__libc_init_array+0x40>)
 80035ae:	4c0c      	ldr	r4, [pc, #48]	@ (80035e0 <__libc_init_array+0x44>)
 80035b0:	f000 f818 	bl	80035e4 <_init>
 80035b4:	1b64      	subs	r4, r4, r5
 80035b6:	10a4      	asrs	r4, r4, #2
 80035b8:	2600      	movs	r6, #0
 80035ba:	42a6      	cmp	r6, r4
 80035bc:	d105      	bne.n	80035ca <__libc_init_array+0x2e>
 80035be:	bd70      	pop	{r4, r5, r6, pc}
 80035c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c4:	4798      	blx	r3
 80035c6:	3601      	adds	r6, #1
 80035c8:	e7ee      	b.n	80035a8 <__libc_init_array+0xc>
 80035ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ce:	4798      	blx	r3
 80035d0:	3601      	adds	r6, #1
 80035d2:	e7f2      	b.n	80035ba <__libc_init_array+0x1e>
 80035d4:	08013b20 	.word	0x08013b20
 80035d8:	08013b20 	.word	0x08013b20
 80035dc:	08013b20 	.word	0x08013b20
 80035e0:	08013b24 	.word	0x08013b24

080035e4 <_init>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	bf00      	nop
 80035e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ea:	bc08      	pop	{r3}
 80035ec:	469e      	mov	lr, r3
 80035ee:	4770      	bx	lr

080035f0 <_fini>:
 80035f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f2:	bf00      	nop
 80035f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f6:	bc08      	pop	{r3}
 80035f8:	469e      	mov	lr, r3
 80035fa:	4770      	bx	lr
